// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuctionItemCreated extends ethereum.Event {
  get params(): AuctionItemCreated__Params {
    return new AuctionItemCreated__Params(this);
  }
}

export class AuctionItemCreated__Params {
  _event: AuctionItemCreated;

  constructor(event: AuctionItemCreated) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get metaDataURI(): string {
    return this._event.parameters[3].value.toString();
  }

  get seller(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get highestBidder(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get highestBid(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get endAt(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get started(): boolean {
    return this._event.parameters[9].value.toBoolean();
  }

  get ended(): boolean {
    return this._event.parameters[10].value.toBoolean();
  }
}

export class AuctionItemSold extends ethereum.Event {
  get params(): AuctionItemSold__Params {
    return new AuctionItemSold__Params(this);
  }
}

export class AuctionItemSold__Params {
  _event: AuctionItemSold;

  constructor(event: AuctionItemSold) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get winner(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get highestBid(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Bid extends ethereum.Event {
  get params(): Bid__Params {
    return new Bid__Params(this);
  }
}

export class Bid__Params {
  _event: Bid;

  constructor(event: Bid) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MarketItemCreated extends ethereum.Event {
  get params(): MarketItemCreated__Params {
    return new MarketItemCreated__Params(this);
  }
}

export class MarketItemCreated__Params {
  _event: MarketItemCreated;

  constructor(event: MarketItemCreated) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nftContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get metaDataURI(): string {
    return this._event.parameters[3].value.toString();
  }

  get seller(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get forSale(): boolean {
    return this._event.parameters[7].value.toBoolean();
  }
}

export class MarketItemRemoved extends ethereum.Event {
  get params(): MarketItemRemoved__Params {
    return new MarketItemRemoved__Params(this);
  }
}

export class MarketItemRemoved__Params {
  _event: MarketItemRemoved;

  constructor(event: MarketItemRemoved) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MarketItemSold extends ethereum.Event {
  get params(): MarketItemSold__Params {
    return new MarketItemSold__Params(this);
  }
}

export class MarketItemSold__Params {
  _event: MarketItemSold;

  constructor(event: MarketItemSold) {
    this._event = event;
  }

  get itemId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Start extends ethereum.Event {
  get params(): Start__Params {
    return new Start__Params(this);
  }
}

export class Start__Params {
  _event: Start;

  constructor(event: Start) {
    this._event = event;
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get bidder(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OnDripMarketPlace__idToAuctionItemResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: Address;
  value5: Address;
  value6: BigInt;
  value7: BigInt;
  value8: boolean;
  value9: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: Address,
    value5: Address,
    value6: BigInt,
    value7: BigInt,
    value8: boolean,
    value9: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromAddress(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromBoolean(this.value8));
    map.set("value9", ethereum.Value.fromBoolean(this.value9));
    return map;
  }

  getItemId(): BigInt {
    return this.value0;
  }

  getNftContract(): Address {
    return this.value1;
  }

  getTokenId(): BigInt {
    return this.value2;
  }

  getSeller(): Address {
    return this.value3;
  }

  getHighestBidder(): Address {
    return this.value4;
  }

  getOwner(): Address {
    return this.value5;
  }

  getHighestBid(): BigInt {
    return this.value6;
  }

  getEndAt(): BigInt {
    return this.value7;
  }

  getStarted(): boolean {
    return this.value8;
  }

  getEnded(): boolean {
    return this.value9;
  }
}

export class OnDripMarketPlace__idToMarketItemResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: Address;
  value4: Address;
  value5: BigInt;
  value6: boolean;
  value7: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: Address,
    value4: Address,
    value5: BigInt,
    value6: boolean,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getItemId(): BigInt {
    return this.value0;
  }

  getNftContract(): Address {
    return this.value1;
  }

  getTokenId(): BigInt {
    return this.value2;
  }

  getSeller(): Address {
    return this.value3;
  }

  getOwner(): Address {
    return this.value4;
  }

  getPrice(): BigInt {
    return this.value5;
  }

  getForSale(): boolean {
    return this.value6;
  }

  getDeleted(): boolean {
    return this.value7;
  }
}

export class OnDripMarketPlace extends ethereum.SmartContract {
  static bind(address: Address): OnDripMarketPlace {
    return new OnDripMarketPlace("OnDripMarketPlace", address);
  }

  bids(param0: Address): BigInt {
    let result = super.call("bids", "bids(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_bids(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("bids", "bids(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createAuctionItem(
    nftContract: Address,
    tokenId: BigInt,
    highestBid: BigInt,
    endTime: BigInt
  ): BigInt {
    let result = super.call(
      "createAuctionItem",
      "createAuctionItem(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(highestBid),
        ethereum.Value.fromUnsignedBigInt(endTime)
      ]
    );

    return result[0].toBigInt();
  }

  try_createAuctionItem(
    nftContract: Address,
    tokenId: BigInt,
    highestBid: BigInt,
    endTime: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createAuctionItem",
      "createAuctionItem(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(highestBid),
        ethereum.Value.fromUnsignedBigInt(endTime)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createMarketItem(
    nftContract: Address,
    tokenId: BigInt,
    price: BigInt
  ): BigInt {
    let result = super.call(
      "createMarketItem",
      "createMarketItem(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(price)
      ]
    );

    return result[0].toBigInt();
  }

  try_createMarketItem(
    nftContract: Address,
    tokenId: BigInt,
    price: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createMarketItem",
      "createMarketItem(address,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(nftContract),
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(price)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  idToAuctionItem(param0: BigInt): OnDripMarketPlace__idToAuctionItemResult {
    let result = super.call(
      "idToAuctionItem",
      "idToAuctionItem(uint256):(uint256,address,uint256,address,address,address,uint256,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OnDripMarketPlace__idToAuctionItemResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toAddress(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toBoolean(),
      result[9].toBoolean()
    );
  }

  try_idToAuctionItem(
    param0: BigInt
  ): ethereum.CallResult<OnDripMarketPlace__idToAuctionItemResult> {
    let result = super.tryCall(
      "idToAuctionItem",
      "idToAuctionItem(uint256):(uint256,address,uint256,address,address,address,uint256,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OnDripMarketPlace__idToAuctionItemResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toAddress(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toBoolean(),
        value[9].toBoolean()
      )
    );
  }

  idToMarketItem(param0: BigInt): OnDripMarketPlace__idToMarketItemResult {
    let result = super.call(
      "idToMarketItem",
      "idToMarketItem(uint256):(uint256,address,uint256,address,address,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new OnDripMarketPlace__idToMarketItemResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toAddress(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBoolean()
    );
  }

  try_idToMarketItem(
    param0: BigInt
  ): ethereum.CallResult<OnDripMarketPlace__idToMarketItemResult> {
    let result = super.tryCall(
      "idToMarketItem",
      "idToMarketItem(uint256):(uint256,address,uint256,address,address,uint256,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OnDripMarketPlace__idToMarketItemResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toAddress(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBoolean()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFeeBasisPoint(): BigInt {
    let result = super.call(
      "platformFeeBasisPoint",
      "platformFeeBasisPoint():(uint96)",
      []
    );

    return result[0].toBigInt();
  }

  try_platformFeeBasisPoint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "platformFeeBasisPoint",
      "platformFeeBasisPoint():(uint96)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _platformFee(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get _itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class CreateAuctionItemCall extends ethereum.Call {
  get inputs(): CreateAuctionItemCall__Inputs {
    return new CreateAuctionItemCall__Inputs(this);
  }

  get outputs(): CreateAuctionItemCall__Outputs {
    return new CreateAuctionItemCall__Outputs(this);
  }
}

export class CreateAuctionItemCall__Inputs {
  _call: CreateAuctionItemCall;

  constructor(call: CreateAuctionItemCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get highestBid(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateAuctionItemCall__Outputs {
  _call: CreateAuctionItemCall;

  constructor(call: CreateAuctionItemCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateMarketItemCall extends ethereum.Call {
  get inputs(): CreateMarketItemCall__Inputs {
    return new CreateMarketItemCall__Inputs(this);
  }

  get outputs(): CreateMarketItemCall__Outputs {
    return new CreateMarketItemCall__Outputs(this);
  }
}

export class CreateMarketItemCall__Inputs {
  _call: CreateMarketItemCall;

  constructor(call: CreateMarketItemCall) {
    this._call = call;
  }

  get nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateMarketItemCall__Outputs {
  _call: CreateMarketItemCall;

  constructor(call: CreateMarketItemCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateMarketSaleCall extends ethereum.Call {
  get inputs(): CreateMarketSaleCall__Inputs {
    return new CreateMarketSaleCall__Inputs(this);
  }

  get outputs(): CreateMarketSaleCall__Outputs {
    return new CreateMarketSaleCall__Outputs(this);
  }
}

export class CreateMarketSaleCall__Inputs {
  _call: CreateMarketSaleCall;

  constructor(call: CreateMarketSaleCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CreateMarketSaleCall__Outputs {
  _call: CreateMarketSaleCall;

  constructor(call: CreateMarketSaleCall) {
    this._call = call;
  }
}

export class EndCall extends ethereum.Call {
  get inputs(): EndCall__Inputs {
    return new EndCall__Inputs(this);
  }

  get outputs(): EndCall__Outputs {
    return new EndCall__Outputs(this);
  }
}

export class EndCall__Inputs {
  _call: EndCall;

  constructor(call: EndCall) {
    this._call = call;
  }

  get _itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class EndCall__Outputs {
  _call: EndCall;

  constructor(call: EndCall) {
    this._call = call;
  }
}

export class RemoveFromSaleCall extends ethereum.Call {
  get inputs(): RemoveFromSaleCall__Inputs {
    return new RemoveFromSaleCall__Inputs(this);
  }

  get outputs(): RemoveFromSaleCall__Outputs {
    return new RemoveFromSaleCall__Outputs(this);
  }
}

export class RemoveFromSaleCall__Inputs {
  _call: RemoveFromSaleCall;

  constructor(call: RemoveFromSaleCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RemoveFromSaleCall__Outputs {
  _call: RemoveFromSaleCall;

  constructor(call: RemoveFromSaleCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
